plugins {
    id 'java-library'
    id 'scala'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'
    id 'com.github.alisiikh.scalastyle' version '3.5.0'
}

test {
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

shadowJar { zip64 = true }

javadoc { failOnError true }

scalastyle {
    config = file("${projectDir}/config/scalastyle_config.xml")
    verbose = true
    failOnWarning = false
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()/*.content {
        excludeModule("javax.media", "jai_core")
    }*/
    //maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation "com.typesafe:config:$typesafeconfigVersion"
    implementation 'com.google.guava:guava:33.1.0-jre'
    implementation 'org.scala-lang:scala-library:2.11.12'
    implementation 'org.scala-lang:scala-reflect:2.11.12'
    implementation 'org.scala-lang:scala-compiler:2.11.12'
    implementation 'org.slf4j:slf4j-api:2.0.12'
    testCompileOnly 'org.slf4j:slf4j-simple:2.0.12'
    // implementation 'org.apache.spark:spark-core_2.11:2.4.7'
    // implementation 'org.apache.spark:spark-hive_2.11:2.4.7'
    // implementation 'org.apache.spark:spark-sql_2.11:2.4.7'
    // implementation 'org.apache.spark:spark-mllib_2.11:2.4.7'
    /*
    implementation 'org.apache.hadoop:hadoop-core:2.6.0-mr1-cdh5.16.99'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.apache.mrunit:mrunit:1.1.0:hadoop2'*/
    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs
    testImplementation 'org.apache.hadoop:hadoop-hdfs:3.4.0'
    
    // SPARK CLUSTER LIBRARIES
    implementation "org.apache.spark:spark-core_2.11:2.4.8.7.2.16.3-8"
    implementation "org.apache.spark:spark-sql_2.11:2.4.8.7.2.16.0-287"
    implementation "org.apache.spark:spark-hive_2.11:2.4.8.7.2.16.3-8"
    //implementation "org.apache.spark:spark-mllib_2.11:2.4.8.7.2.16.3-8"
    
    // implementation "org.apache.spark:spark-core_2.11:2.4.0-cdh6.2.0"
    // implementation "org.apache.spark:spark-sql_2.11:2.4.0-cdh6.2.0"
    // implementation "org.apache.spark:spark-hive_2.11:2.4.0-cdh6.2.0"
    // implementation "org.apache.spark:spark-mllib_2.11:2.4.0-cdh6.2.0"
    //geo trellis
    implementation "org.locationtech.geotrellis:geotrellis-vector_${scalaRelease}:${geoTrellisVersion}"
    implementation "org.locationtech.geotrellis:geotrellis-spark_${scalaRelease}:${geoTrellisVersion}"
    implementation "org.locationtech.geotrellis:geotrellis-raster_${scalaRelease}:${geoTrellisVersion}"
    /*implementation 'org.geotools:gt-shapefile:20.0'
    implementation "org.locationtech.geotrellis:geotrellis-shapefile_${scalaRelease}:${geoTrellisVersion}"*/
    //geospark
    implementation "org.datasyslab:geospark:${geoSparkVersion}"
    implementation "org.datasyslab:geospark-sql_2.3:${geoSparkVersion}"
    implementation "org.datasyslab:geospark-viz_2.3:${geoSparkVersion}"
    //postgresql
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    // HBase
    implementation "org.apache.hbase:hbase-common:${clouderaHBaseVersion}"
    implementation "org.apache.hbase:hbase-client:${clouderaHBaseVersion}"
    implementation "org.apache.hbase:hbase-spark:${clouderaHBaseVersion}"
    //download as http client
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.jsoup:jsoup:1.17.2'
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

defaultTasks 'clean', 'build', 'check', 'javadoc', 'shadowJar'
